<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不忘初心</title>
  
  <subtitle>乾學長的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.huangqian.vip/"/>
  <updated>2022-07-08T19:29:36.069Z</updated>
  <id>http://blog.huangqian.vip/</id>
  
  <author>
    <name>乾學長</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FE_deploy</title>
    <link href="http://blog.huangqian.vip/2022/07/09/FE-deploy/"/>
    <id>http://blog.huangqian.vip/2022/07/09/FE-deploy/</id>
    <published>2022-07-08T19:26:24.000Z</published>
    <updated>2022-07-08T19:29:36.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-前端代码从-tsx-jsx-到部署上线被用户访问，中间大致会经历哪些过程？"><a href="#1-1-前端代码从-tsx-jsx-到部署上线被用户访问，中间大致会经历哪些过程？" class="headerlink" title="1.1 前端代码从 tsx/jsx 到部署上线被用户访问，中间大致会经历哪些过程？"></a>1.1 前端代码从 tsx/jsx 到部署上线被用户访问，中间大致会经历哪些过程？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#11-前端代码从-tsxjsx-到部署上线被用户访问中间大致会经历哪些过程"></a></h3><h3 id="1-2-上述过程中分别都有哪些考虑、指标和优化点，以满足复杂的业务需求？"><a href="#1-2-上述过程中分别都有哪些考虑、指标和优化点，以满足复杂的业务需求？" class="headerlink" title="1.2 上述过程中分别都有哪些考虑、指标和优化点，以满足复杂的业务需求？"></a>1.2 上述过程中分别都有哪些考虑、指标和优化点，以满足复杂的业务需求？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#12-上述过程中分别都有哪些考虑指标和优化点以满足复杂的业务需求"></a></h3><h3 id="1-3-可能大部分同学都知道强缓存-协商缓存，那前端各种产物（HTML、JS、CSS、IMAGES-等）应该用什么缓存策略？以及为什么？"><a href="#1-3-可能大部分同学都知道强缓存-协商缓存，那前端各种产物（HTML、JS、CSS、IMAGES-等）应该用什么缓存策略？以及为什么？" class="headerlink" title="1.3 可能大部分同学都知道强缓存/协商缓存，那前端各种产物（HTML、JS、CSS、IMAGES 等）应该用什么缓存策略？以及为什么？"></a>1.3 可能大部分同学都知道强缓存/协商缓存，那前端各种产物（HTML、JS、CSS、IMAGES 等）应该用什么缓存策略？以及为什么？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#13-可能大部分同学都知道强缓存协商缓存那前端各种产物htmljscssimages-等应该用什么缓存策略以及为什么"></a></h3><h3 id="1-4-若使用协商缓存，但静态资源却不频繁更新，如何避免协商过程的请求浪费？"><a href="#1-4-若使用协商缓存，但静态资源却不频繁更新，如何避免协商过程的请求浪费？" class="headerlink" title="1.4 若使用协商缓存，但静态资源却不频繁更新，如何避免协商过程的请求浪费？"></a>1.4 若使用协商缓存，但静态资源却不频繁更新，如何避免协商过程的请求浪费？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#14-若使用协商缓存但静态资源却不频繁更新如何避免协商过程的请求浪费"></a></h3><h3 id="1-5-若使用强缓存，那静态资源如何更新？"><a href="#1-5-若使用强缓存，那静态资源如何更新？" class="headerlink" title="1.5 若使用强缓存，那静态资源如何更新？"></a>1.5 若使用强缓存，那静态资源如何更新？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#15-若使用强缓存那静态资源如何更新"></a></h3><h3 id="1-6-配套的，前端静态资源应该如何组织？"><a href="#1-6-配套的，前端静态资源应该如何组织？" class="headerlink" title="1.6 配套的，前端静态资源应该如何组织？"></a>1.6 配套的，前端静态资源应该如何组织？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#16-配套的前端静态资源应该如何组织"></a></h3><h3 id="1-7-配套的，自动化构建-amp-部署过程如何与-CDN-结合？"><a href="#1-7-配套的，自动化构建-amp-部署过程如何与-CDN-结合？" class="headerlink" title="1.7 配套的，自动化构建 &amp; 部署过程如何与 CDN 结合？"></a>1.7 配套的，自动化构建 &amp; 部署过程如何与 CDN 结合？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#17-配套的自动化构建--部署过程如何与-cdn-结合"></a></h3><h3 id="1-8-如何避免前端上线，影响未刷新页面的用户？"><a href="#1-8-如何避免前端上线，影响未刷新页面的用户？" class="headerlink" title="1.8 如何避免前端上线，影响未刷新页面的用户？"></a>1.8 如何避免前端上线，影响未刷新页面的用户？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#18-如何避免前端上线影响未刷新页面的用户"></a></h3><h3 id="1-9-刚上线的版本发现有阻塞性-bug，如何做到秒级回滚，而非再次部署等-20-分钟甚至更久？"><a href="#1-9-刚上线的版本发现有阻塞性-bug，如何做到秒级回滚，而非再次部署等-20-分钟甚至更久？" class="headerlink" title="1.9 刚上线的版本发现有阻塞性 bug，如何做到秒级回滚，而非再次部署等 20 分钟甚至更久？"></a>1.9 刚上线的版本发现有阻塞性 bug，如何做到秒级回滚，而非再次部署等 20 分钟甚至更久？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#19-刚上线的版本发现有阻塞性-bug如何做到秒级回滚而非再次部署等-20-分钟甚至更久"></a></h3><h3 id="2-0-如何实现一个预发环境，除了前端资源外都是线上环境，将变量控制前端环境内？"><a href="#2-0-如何实现一个预发环境，除了前端资源外都是线上环境，将变量控制前端环境内？" class="headerlink" title="2.0 如何实现一个预发环境，除了前端资源外都是线上环境，将变量控制前端环境内？"></a>2.0 如何实现一个预发环境，除了前端资源外都是线上环境，将变量控制前端环境内？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#20-如何实现一个预发环境除了前端资源外都是线上环境将变量控制前端环境内"></a></h3><h3 id="2-1-部署环节如何方便配套做-AB-测试等？"><a href="#2-1-部署环节如何方便配套做-AB-测试等？" class="headerlink" title="2.1 部署环节如何方便配套做 AB 测试等？"></a>2.1 部署环节如何方便配套做 AB 测试等？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#21-部署环节如何方便配套做-ab-测试等"></a></h3><h3 id="2-2-如何实现一套前端代码，发布成多套环境产物？"><a href="#2-2-如何实现一套前端代码，发布成多套环境产物？" class="headerlink" title="2.2 如何实现一套前端代码，发布成多套环境产物？"></a>2.2 如何实现一套前端代码，发布成多套环境产物？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#22-如何实现一套前端代码发布成多套环境产物"></a></h3><h3 id="2-3-如何实现按-feature-发布产物供用户使用，并逐步扩大-feature-灰度，将影响减到最小（即线上同时存在多-feature-产物）？"><a href="#2-3-如何实现按-feature-发布产物供用户使用，并逐步扩大-feature-灰度，将影响减到最小（即线上同时存在多-feature-产物）？" class="headerlink" title="2.3 如何实现按 feature 发布产物供用户使用，并逐步扩大 feature 灰度，将影响减到最小（即线上同时存在多 feature 产物）？"></a>2.3 如何实现按 feature 发布产物供用户使用，并逐步扩大 feature 灰度，将影响减到最小（即线上同时存在多 feature 产物）？<a href="https://xuhaichaoy.github.io/doc/docs/tutorial-basics/Interview#23-如何实现按-feature-发布产物供用户使用并逐步扩大-feature-灰度将影响减到最小即线上同时存在多-feature-产物"></a></h3><h3 id="2-4-CDN-域名突然挂了，如何实现秒级-CDN-降级修补而非再次全部业务重新部署一次？"><a href="#2-4-CDN-域名突然挂了，如何实现秒级-CDN-降级修补而非再次全部业务重新部署一次？" class="headerlink" title="2.4 CDN 域名突然挂了，如何实现秒级 CDN 降级修补而非再次全部业务重新部署一次？"></a>2.4 CDN 域名突然挂了，如何实现秒级 CDN 降级修补而非再次全部业务重新部署一次？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-前端代码从-tsx-jsx-到部署上线被用户访问，中间大致会经历哪些过程？&quot;&gt;&lt;a href=&quot;#1-1-前端代码从-tsx-jsx-到部署上线被用户访问，中间大致会经历哪些过程？&quot; class=&quot;headerlink&quot; title=&quot;1.1 前端代码从 
      
    
    </summary>
    
      <category term="basics" scheme="http://blog.huangqian.vip/categories/basics/"/>
    
    
      <category term="deploy" scheme="http://blog.huangqian.vip/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>basics</title>
    <link href="http://blog.huangqian.vip/2022/07/09/basics/"/>
    <id>http://blog.huangqian.vip/2022/07/09/basics/</id>
    <published>2022-07-08T18:56:42.000Z</published>
    <updated>2022-07-08T19:34:56.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="浏览器从输入-url-到渲染页面，发生了什么"><a href="#浏览器从输入-url-到渲染页面，发生了什么" class="headerlink" title="浏览器从输入 url 到渲染页面，发生了什么"></a>浏览器从输入 url 到渲染页面，发生了什么</h2><ol><li>首先解析域名，利用 dns 服务器解析域名成 ip<ul><li>域名为什么要解析？<ul><li>首先域名只能是 字母+数字+一些特殊符号（就是不包含百分号、双引号）不转义会出歧义</li><li>Utf-8 编码</li><li>encodeURL encodeURLComponent 编码</li></ul></li><li>dns 如何工作？<ul><li>首先会从本机的 hosts 文件查找，查找到返回，</li><li>然后从本机配置的 dns 服务器缓存查找</li><li>然后从根 DNS 服务器查找（全球 13 台）</li><li>然后试图解析.baidu.com 直到能解析</li></ul></li><li>前端 dns 优化<ul><li>html 页面头部写入 dns 缓存地址</li></ul></li></ul></li><li>拿到 ip 以后，建立 TCP 链接（三次握手以及后面的四次分手）<ul><li>为什么是三次两次不行？<ul><li>两次可能会出现 A =&gt; B，B 未收到，A 又发送给 B</li><li>A=&gt;B，A 未收到</li></ul></li><li>第一次握手：A 发送位码 SYN=1 TCP 包给服务器，并且随机产生一个确认号，主机 B 收到 SYN 码知道 A 要建立连接</li><li>第二次握手：B 收到请求以后，向 A 发送确认号（主机 A 的确认码+1），SYN=1，SEQ=随机数的包</li><li>第三次握手：A 收到确认号检查是否正确，是否是第一次发送值+1，以及位码是否为 1，如果正确，A 会再次发送主机 B SEQ+1，ack=1 给 B，主机 B 收到以后建立成功</li></ul></li><li>然后是强缓存，协商缓存<ul><li>强缓存，cache-control：no-cache 直接进入协商缓存，如果在时间内命中强缓存，不发送请求直接本地缓存读取文件， 如果没有 cache-control 会读取 expires 对比是否过期</li><li>协商缓存，向服务器发送 if-None-match 和 if-modify-since 请求，服务器会比较 etag，相同，协商缓存，304；不一致，新资源+200+新的 etag</li></ul></li><li>拿到 html css js<ol><li>构建 DOM 树</li><li>构建 CSSOM 树</li><li>执行 JS</li><li>构建渲染树</li><li>渲染树</li><li>布局</li><li>绘制</li></ol></li><li>页面渲染</li></ol><h2 id="Vue-和-React-对比"><a href="#Vue-和-React-对比" class="headerlink" title="Vue 和 React 对比"></a>Vue 和 React 对比</h2><p><strong>Vue</strong> 的思想是响应式的，也就是基于数据可变，通过对每一个属性建立 Watcher 来监听，当属性发生变化的时候，响应式的更新对应的虚拟 DOM</p><p><strong>React</strong> 主张函数式编程，所以推崇纯组件，数据不可变，单向数据流</p><p>监听数据变化实现原理：</p><ul><li>Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</li><li>React 通过比较引用的方式进行，如果不优化（PureCompont/shouldComponentUpdate）可能会导致大量不必要的 VDOM 重新渲染</li></ul><p>组件通信区别： jsx 和.vue 模版</p><ul><li>HOC 和 Mixins（Vue 中组合不用功能通过 mixin），React 通过高阶组件</li></ul><p>性能优化：</p><ul><li>React：shouldComponentUpdate</li><li>Vue：内部实现 shouldComponentUpdate 优化，由于依赖追踪系统，通过 watcher 判断是否需要重新渲染（页面数据量大时，性能较差）</li></ul><h2 id="Vuex-和-Redux-区别"><a href="#Vuex-和-Redux-区别" class="headerlink" title="Vuex 和 Redux 区别"></a>Vuex 和 Redux 区别</h2><p><strong>Redux</strong> 使用的是不可变数据，<strong>Vuex</strong> 是可变的，每次都用新的 state 替换旧的，vuex 是直接修改</p><p>Redux 监测数据变化是通过 diff 比较差异，Vuex 原理与 vue 相同，通过 getter/setter 比较</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="Plugin-Loader-区别"><a href="#Plugin-Loader-区别" class="headerlink" title="Plugin/Loader 区别"></a><strong>Plugin/Loader 区别</strong></h3><ul><li>Loader 是加载器 Webpack 将⼀切⽂件视为模块，但是 Webpack 原⽣是只能解析 JavaScript ⽂件，如果想将其他⽂件也打包的话，就会⽤到 Loader。 所以 Loader 的作⽤是让 Webpack 拥有了加载和解析非 JavaScript 文件的能力;</li><li>Plugin 是插件 Plugin 可以扩展 Webpack 的功能,让 Webpack 具有灵活性。在 Webpack 运⾏的⽣命周期中会⼴播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li></ul><h3 id="WebPack-中-bundle-chunk-module-的作用"><a href="#WebPack-中-bundle-chunk-module-的作用" class="headerlink" title="WebPack 中 bundle,chunk,module 的作用"></a><strong>WebPack 中 bundle,chunk,module 的作用</strong></h3><ul><li>bundle 是由 Webpack 打包出来的文件;</li><li>chunk 代码块,一个 chunk 由多个模块组合⽽成，⽤于代码的合并和分割;</li><li>module 是开发中的单个模块，在 Webpack 中⼀个模块对应⼀个⽂件，Webpack 会从配置的 entry 中递归开始找出所有依赖的模块。</li></ul><h2 id="ES-moudle-和-CommonJS-区别"><a href="#ES-moudle-和-CommonJS-区别" class="headerlink" title="ES moudle 和 CommonJS 区别"></a>ES moudle 和 CommonJS 区别</h2><p>CommonJS 是对值的拷贝, 可以修改导出的值, 可以动态引入, 代码发生在运行时, 混合导出, 使用 exports 导出单个值以后, 就不能在导出一个对象值, 只会修改 exports 的对象改变 ES Moudle 是值的引用, 只读状态, 不能修改变量值, 不可以动态引入, 代码发生在编译时, 混合导出, 单个导出, 默认导出 互不影响</p><p>CommonJS 是对模块的浅拷贝，ES6 Moundle 是对模块的引用，即 ES6 Moudle 只存不读，不能改变其值，也就是指针指向不变，类似 const</p><p>import 的接口是 read-only（只读状态），不能修改变量值，不能改变指针</p><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p><strong>Get 和 Post 请求的区别</strong></p><ul><li>应用场景: Get 请求一般用来获取数据, 一般 Get 请求用于对服务器资源不会产生影响; Post 请求一般用于对服务器产生影响的情景.</li><li>是否缓存: 浏览器一般会对 Get 请求缓存, 但很少对 Post 缓存</li><li>发送的报文格式: get 请求实体部分为空, post 为数据</li><li>安全性: get 请求会将参数拼接到 url 上, 相对于 post 不安全, 会被历史记录保留</li><li>请求长度: url 长度会被限制</li><li>参数类型: post 请求支持更多数据类型</li></ul><p><strong>HTTP1.0 和 HTTP1.1 区别</strong></p><ul><li>连接方面: http1.0 默认非持久连接, http1.1 持久连接. http1.1 通过持久连接使多个 http 复用同一个 TCP 连接, 避免建立连接时延.</li><li>资源请求方面: 1.0 不支持断点续传, 服务端发送完整对象. 1.1 加入了 range, 允许只请求部分资源,返回码 206</li><li>缓存方面: 1.0 使用 header if_modified-since、Expires 做为缓存标准. 1.1 使用 Etag、if-Match、if-None-Match 缓存头控制</li><li>1.1 新增 host 字段, 指定服务器域名. 1.0 认为每台服务器都绑定唯一 ip, 因此并没有传递主机名.</li><li>1.1 新增许多请求方法, put head options</li></ul><p><strong>Http1.1 和 Http2.0 区别</strong></p><ul><li>二进制协议 1.1 文本 + 二进制; 2.0 纯二进制</li><li>多路复用 仍复用 TCP 连接, 在同一个连接内, 客户端服务器都可以同时发送多个请求或回应, 不用按照顺序, 避免了队头阻塞</li><li>数据流 2.0 采用数据流, 数据包不按顺序发送, 数据包发送的时候必须标记数据流 ID</li><li>头信息压缩 1.1 协议不带状态, 每次请求必须携带所有信息, 2.0 头信息压缩 gzip/compress 压缩后发送; 另一方面客户端和服务器维护一个头信息表,所有字段存入,生成索引号,不发送相同字段</li><li>服务器推送 2.0 允许服务器主动向客户端发送资源. 提前给客户端推送必要资源.</li></ul><h3 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h3><p>队头阻塞是由 http 规定报文必须是一发一收,这就是一个串行队列, 请求没有优先级, 只有入队顺序.</p><p><strong>Https 和 Http 区别</strong></p><ul><li>https 需要 CA 证书, 费用较高</li><li>http 是超文本传输协议, 明文传输, https 是 SSL 加密传输协议</li><li>http 80 端口 https 443</li><li>http 连接无状态; https 有 SSL 加密传输, 身份验证 更安全</li></ul><p><strong>多张图片, 加载</strong></p><ul><li>1 下, 浏览器对一个域名下最大 TCP 连接为 6, 会请求多次. 可以通过多域名部署解决.加快速度</li><li>2 下, 瞬间加载多个资源, 多路复用, 可以发送多个请求</li></ul><p><strong>HTTP 协议的优点和缺点</strong></p><ul><li>简单快速</li><li>无连接</li><li>无状态</li><li>灵活</li></ul><p><strong>浏览器渲染机制、重绘、重排</strong></p><p>网页生成过程:</p><ul><li>HTML被html解析器解析成<code>DOM</code>树</li><li>CSS被css解析器解析成<code>CSSOM</code>树</li><li>结合<code>DOM</code>树和<code>CSSOM</code>树, 生成一颗渲染树(<code>Render Tree</code>)</li><li>生成布局(<code>flow</code>), 即将所有渲染树的所有节点平面合成</li><li>将布局绘制(<code>paint</code>)</li></ul><p>重排一定会引起重绘, 重绘不一定重排</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Basics&quot;&gt;&lt;a href=&quot;#Basics&quot; class=&quot;headerlink&quot; title=&quot;Basics&quot;&gt;&lt;/a&gt;Basics&lt;/h1&gt;&lt;h2 id=&quot;浏览器从输入-url-到渲染页面，发生了什么&quot;&gt;&lt;a href=&quot;#浏览器从输入-url-到渲染页
      
    
    </summary>
    
      <category term="basics" scheme="http://blog.huangqian.vip/categories/basics/"/>
    
    
      <category term="interview" scheme="http://blog.huangqian.vip/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="http://blog.huangqian.vip/2022/07/07/algorithm/"/>
    <id>http://blog.huangqian.vip/2022/07/07/algorithm/</id>
    <published>2022-07-06T19:15:36.000Z</published>
    <updated>2022-07-08T18:55:39.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, time = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="comment">// Click to take effect </span></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span></span><br><span class="line">    flag = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    timer &amp;&amp; <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">get</span>(target)) &#123;</span><br><span class="line">      <span class="keyword">return</span> map.<span class="title function_">get</span>(target)</span><br><span class="line">    &#125;</span><br><span class="line">    map.<span class="title function_">set</span>(target, obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      obj[key] = <span class="title function_">clone</span>(target[key], map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组扁平化去重排序"><a href="#数组扁平化去重排序" class="headerlink" title="数组扁平化去重排序"></a>数组扁平化去重排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已知如下数组：</span></span><br><span class="line"><span class="comment">// let arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</span></span><br><span class="line"><span class="comment">// 编写一个程序将数组扁平化去并除其中重复部分数据，最终得到一个升序且不重复的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">1</span></span><br><span class="line"><span class="number">1</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>))).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(arr)</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, 2, 3, 1, 3, 54, 12, 4, 1, 43, 5]</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">43</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[j + <span class="number">1</span>]</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>参数复用(固定易变因素)</li><li>延迟执行</li><li>提前返回</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>柯里化是牺牲了部分性能来实现的，可能带来的性能损耗：</p><ol><li>存取 arguments 对象要比存取命名参数要慢一些</li><li>老版本浏览器在 arguments.lengths 的实现相当慢(新版本浏览器忽略)</li><li>fn.apply() 和 fn.call() 要比直接调用 fn() 慢</li><li>大量嵌套的作用域和闭包会带来开销，影响内存占用和作用域链查找速度</li></ol><h3 id="柯里化的应用"><a href="#柯里化的应用" class="headerlink" title="柯里化的应用"></a>柯里化的应用</h3><ol><li>利用柯里化制定约束条件，管控触发机制</li><li>处理浏览器兼容(参数复用实现一次性判断)</li><li>函数节流防抖(延迟执行)</li><li>ES5前bind方法的实现</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// curryingAdd(1)(2)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curryingAdd</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">curryingAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="两个有序数组合并成一个有序数组"><a href="#两个有序数组合并成一个有序数组" class="headerlink" title="两个有序数组合并成一个有序数组"></a>两个有序数组合并成一个有序数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> left1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> left2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line"><span class="keyword">while</span> (left1 &lt; arr1.<span class="property">length</span> || left2 &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr1[left1] &amp;&amp; arr2[left2]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[left1] &gt; arr2[left2]) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arr2[left2])</span><br><span class="line">      left2 ++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr1[left1] &lt; arr2[left2]) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arr1[left1])</span><br><span class="line">      left1 ++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arr1[left1])</span><br><span class="line">      res.<span class="title function_">push</span>(arr1[left1])</span><br><span class="line">      left1 ++</span><br><span class="line">      left2 ++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr1[left1]) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(arr1[left1]);</span><br><span class="line">    left1 ++</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr2[left2]) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(arr2[left2])</span><br><span class="line">    left2 ++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求一个数组中出现次数最多的几个值"><a href="#求一个数组中出现次数最多的几个值" class="headerlink" title="求一个数组中出现次数最多的几个值"></a>求一个数组中出现次数最多的几个值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj[arr[i]]) &#123;</span><br><span class="line">    obj[arr[i]]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[arr[i]] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  max = <span class="title class_">Math</span>.<span class="title function_">max</span>(obj[arr[i]], max)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj[key] === max) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (params === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> params * <span class="title function_">fn</span>(params - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bing-实现"><a href="#bing-实现" class="headerlink" title="bing 实现"></a><code>bing</code> 实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bind实现要复杂一点  因为他考虑的情况比较多 还要涉及到参数合并(类似函数柯里化)</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!context || context === <span class="literal">null</span>) &#123;</span><br><span class="line">    context = <span class="variable language_">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创造唯一的key值  作为我们构造的context内部方法名</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">//  bind情况要复杂一点</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">function</span> (<span class="params">...innerArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一种情况 :若是将 bind 绑定之后的函数当作构造函数，通过 new 操作符使用，则不绑定传入的 this，而是将 this 指向实例化出来的对象</span></span><br><span class="line">    <span class="comment">// 此时由于new操作符作用  this指向result实例对象  而result又继承自传入的_this 根据原型链知识可得出以下结论</span></span><br><span class="line">    <span class="comment">// this.__proto__ === result.prototype   //this instanceof result =&gt;true</span></span><br><span class="line">    <span class="comment">// this.__proto__.__proto__ === result.prototype.__proto__ === _this.prototype; //this instanceof _this =&gt;true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> _this === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 此时this指向指向result的实例  这时候不需要改变this指向</span></span><br><span class="line">      <span class="variable language_">this</span>[fn] = _this</span><br><span class="line">      <span class="variable language_">this</span>[fn](...[...args, ...innerArgs]) <span class="comment">//这里使用es6的方法让bind支持参数合并</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>[fn]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果只是作为普通函数调用  那就很简单了 直接改变this指向为传入的context</span></span><br><span class="line">      context[fn](...[...args, ...innerArgs])</span><br><span class="line">      <span class="keyword">delete</span> context[fn]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 如果绑定的是构造函数 那么需要继承构造函数原型属性和方法</span></span><br><span class="line">  <span class="comment">// 实现继承的方式: 使用Object.create</span></span><br><span class="line">  result.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//&#x27;我是参数传进来的name&#x27;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//&#x27;我是参数传进来的age&#x27;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//构造函数this指向实例对象</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 构造函数原型的方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">objName</span>: <span class="string">&#x27;我是obj传进来的name&#x27;</span>,</span><br><span class="line">  <span class="attr">objAge</span>: <span class="string">&#x27;我是obj传进来的age&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalFun</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">//&#x27;我是参数传进来的name&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);   <span class="comment">//&#x27;我是参数传进来的age&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//普通函数this指向绑定bind的第一个参数 也就是例子中的obj</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">objName</span>); <span class="comment">//&#x27;我是obj传进来的name&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">objAge</span>); <span class="comment">//&#x27;我是obj传进来的age&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先测试作为构造函数调用</span></span><br><span class="line"><span class="keyword">let</span> bindFun = <span class="title class_">Person</span>.<span class="title function_">myBind</span>(obj, <span class="string">&#x27;我是参数传进来的name&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">bindFun</span>(<span class="string">&#x27;我是参数传进来的age&#x27;</span>)</span><br><span class="line">a.<span class="title function_">say</span>() <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再测试作为普通函数调用</span></span><br><span class="line"><span class="keyword">let</span> bindFun = normalFun.<span class="title function_">myBind</span>(obj, <span class="string">&#x27;我是参数传进来的name&#x27;</span>)</span><br><span class="line"><span class="title function_">bindFun</span>(<span class="string">&#x27;我是参数传进来的age&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="promise-all-和-race实现"><a href="#promise-all-和-race实现" class="headerlink" title="promise.all 和 race实现"></a>promise.all 和 race实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="comment">// 声明一个计数器 每一个promise返回就加一</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mypromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 这里用 Promise.resolve包装一下 防止不是Promise类型传进来</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promiseArr[i]).<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里不能直接push数组  因为要控制顺序一一对应</span></span><br><span class="line">            result[i] = res</span><br><span class="line">            count++</span><br><span class="line">            <span class="comment">// 只有全部的promise执行成功之后才resolve出去</span></span><br><span class="line">            <span class="keyword">if</span> (count === promiseArr.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mypromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promiseArr[i]).<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// promise数组只要有任何一个promise 状态变更  就可以返回</span></span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-new-操作符"><a href="#实现-new-操作符" class="headerlink" title="实现 new 操作符"></a>实现 <code>new</code> 操作符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj, ...args)</span><br><span class="line">  <span class="keyword">if</span>(res &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span>) || <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用setTimeout-模拟-setInterval"><a href="#用setTimeout-模拟-setInterval" class="headerlink" title="用setTimeout 模拟 setInterval"></a>用setTimeout 模拟 setInterval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">mySetInterval</span>(<span class="params">fn, time = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> isClear = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">interval</span> () &#123;</span><br><span class="line">      <span class="keyword">if</span>(isClear) &#123;</span><br><span class="line">        isClear = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(interval, time)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(interval, time)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isClear = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let a = mySetInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(111);</span></span><br><span class="line"><span class="comment">// &#125;, 1000)</span></span><br><span class="line"><span class="comment">// let cancel = mySetInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(222)</span></span><br><span class="line"><span class="comment">// &#125;, 1000)</span></span><br><span class="line"><span class="comment">// cancel()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现发布订阅模式"><a href="#实现发布订阅模式" class="headerlink" title="实现发布订阅模式"></a>实现发布订阅模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现订阅</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, callBack</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">events</span>[type]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[type] = [callBack]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">push</span>(callBack)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除订阅</span></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">type, callBack</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">events</span>[type]) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[type] = <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item !== callBack</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只执行一次订阅事件</span></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">type, callBack</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">callBack</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(type, fn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(type, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">type, ...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[type] &amp;&amp; <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, rest))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用如下</span></span><br><span class="line"><span class="comment">// const event = new EventEmitter()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const handle = (...rest) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(rest)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.on(&quot;click&quot;, handle)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.emit(&quot;click&quot;, 1, 2, 3, 4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.off(&quot;click&quot;, handle)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.emit(&quot;click&quot;, 1, 2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.once(&quot;dbClick&quot;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(123456)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// event.emit(&quot;dbClick&quot;)</span></span><br><span class="line"><span class="comment">// event.emit(&quot;dbClick&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;h2 id=&quot;节流&quot;&gt;&lt;a href=&quot;#节流&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="algorithm" scheme="http://blog.huangqian.vip/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://blog.huangqian.vip/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="http://blog.huangqian.vip/2018/12/17/vue-router/"/>
    <id>http://blog.huangqian.vip/2018/12/17/vue-router/</id>
    <published>2018-12-17T14:49:53.000Z</published>
    <updated>2022-07-06T18:47:48.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">        routes，</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>, <span class="comment">// 去掉路由中的 #/</span></span><br><span class="line">        <span class="attr">base</span>: <span class="string">&#x27;/base/&#x27;</span>, <span class="comment">// 所有通过配置的路由在进入的时候都会加上 /base 的前缀，但是 base 不是强制性的，在没有/base 的时候，路由还是能够正常的使用</span></span><br><span class="line">        <span class="attr">linkActiveClass</span>: <span class="string">&#x27;activeLink&#x27;</span>, <span class="comment">// 配置全局样式，修改链接被激活样式, 部分匹配</span></span><br><span class="line">        <span class="attr">linkExactActiveClass</span>: <span class="string">&#x27;exactActiveLink&#x27;</span>, <span class="comment">// 完全匹配的当前路由</span></span><br><span class="line">        <span class="attr">scrollBehavior</span>: (to, <span class="keyword">from</span>, savedPosition) &#123; <span class="comment">// 页面路径跳转的时候，页面滚动位置</span></span><br><span class="line">        <span class="keyword">if</span> (avedPosition) &#123;</span><br><span class="line">        <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;      </span><br><span class="line">             &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        parseQuery (query) &#123;&#125;,</span><br><span class="line">        stringifyQuery (object) &#123;&#125;,</span><br><span class="line">        <span class="attr">fallback</span>: <span class="literal">true</span> <span class="comment">// 不是所有的浏览器都支持 history 的方式，Vue会自动变为hash的形式，一般设置成 true 就行了，如果为 false，单页应用就不存在了 </span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认路由 / 自动重定向到 /app</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/app&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// routes 基本路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/app&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Todo</span>,</span><br><span class="line">        <span class="attr">a</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 一般当做参数传递使用，防止vue自动忽略</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">descriptiton</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;children&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Children</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 动态query, query 不一定要在使用的时候拼上去，可以使用 props 的方式传递，当 props：true 的时候，只需要在组件中定义 props: [&#x27;id&#x27;] 即可，从而可以不用 $route 对象使用，不再需要 router 读取</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/app/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// props 也可以是一个方法进行自定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/app/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">xx</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 main.js 中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import createRouter from &#x27;./router/routes&#x27;</span><br><span class="line"></span><br><span class="line">const router = createRouter()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>webpack</code> 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.client.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devServer = &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">    <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//如果 Router 对象中使用了mode: &#x27;history&#x27;， 这里必须配置才能在手动进入项目的时候不会出现404，这里 index 的路径必须与 `webpack.config.base.js`中的 `output.publicPath` 相对应 `/public/`</span></span><br><span class="line">    <span class="attr">histortApiFallback</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="string">&#x27;/index.html&#x27;</span>,</span><br><span class="line">        <span class="comment">//index: &#x27;/public/index.html&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul><li><p><code>transition</code> 组件包裹 <code>router-view</code> 路由切换时加上过渡动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//global.css</span><br><span class="line"></span><br><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">    transition: opcity .5s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter, .fade-leave-to &#123;</span><br><span class="line">    opcity: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//.vue</span><br><span class="line">&lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">&lt;router-view /&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>this.$route</code> 该对象包含路由的所有参数</p><ul><li><code>params</code> 动态参数</li><li><code>query</code> hash参数</li></ul></li></ul><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ul><li><p>全局守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before each invoked&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">fullPath</span> === <span class="string">&#x27;/app&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before resolve invoked&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after each invoked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由配置守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Todo</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">descriptiton</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//执行时间实在全局的 beforeEach 和 beforeResolve 之间</span></span><br><span class="line">    <span class="title function_">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app route before enter&#x27;</span>)</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">        console.log(&#x27;todo enter enter&#x27;)</span><br><span class="line">        next()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 同样的路由形式在不通的参数改变的时候触发，优化了 watch 去监听路由参数的处理方式</span><br><span class="line">    beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">        console.log(&#x27;todo update enter&#x27;)</span><br><span class="line">        next()</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">        console.log(&#x27;todo leave enter&#x27;)</span><br><span class="line">        next()</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在组件内路由中是没法获取组件实例 this 的，可以通过下面的方式获取组件实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    next(vm =&gt; &#123;</span><br><span class="line">    console.log(&#x27;todo enter enter&#x27;, vm)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h3><ul><li><p>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 组件内配置</span><br><span class="line">component: () =&gt; import(&#x27;../login/login.vue&#x27;),</span><br><span class="line"></span><br><span class="line">// 修改 router</span><br><span class="line">&#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    component: import(&#x27;../login/login.vue&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 安装插件</span><br><span class="line">npm babel-plugin-syntax-dynamic-import -D</span><br><span class="line"></span><br><span class="line">// babelrc 文件</span><br><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;syntax-dynamic-import&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">//重启服务</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>作用：加速首屏渲染的速度</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-Router&quot;&gt;&lt;a href=&quot;#Vue-Router&quot; class=&quot;headerlink&quot; title=&quot;Vue-Router&quot;&gt;&lt;/a&gt;Vue-Router&lt;/h2&gt;&lt;h3 id=&quot;基本参数&quot;&gt;&lt;a href=&quot;#基本参数&quot; class=&quot;head
      
    
    </summary>
    
      <category term="vue" scheme="http://blog.huangqian.vip/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.huangqian.vip/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://blog.huangqian.vip/2018/12/17/vuex/"/>
    <id>http://blog.huangqian.vip/2018/12/17/vuex/</id>
    <published>2018-12-17T14:48:18.000Z</published>
    <updated>2022-07-06T18:48:06.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="安装、引入、使用"><a href="#安装、引入、使用" class="headerlink" title="安装、引入、使用"></a>安装、引入、使用</h3><ul><li><p><code>npm install vuex -S</code></p></li><li><p>引入并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        updateCount (state, num) &#123;</span><br><span class="line">            state.<span class="property">count</span> = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main.js 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>()</span><br></pre></td></tr></table></figure></li><li><p>调用 store 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;updateCount&#x27;</span>, i++)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开发使用</p><ul><li><p>store 文件目录结构</p><blockquote><p>store</p><blockquote><p>store.js    </p></blockquote><blockquote><blockquote><p>state </p><blockquote><p>state.js</p></blockquote></blockquote><blockquote><p>mutations</p><blockquote><p>mutations.js</p></blockquote></blockquote><blockquote><p>getters</p><blockquote><p>getters.js</p></blockquote><p>actions</p><blockquote><p>actions.js</p></blockquote></blockquote></blockquote></blockquote></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> defaultState <span class="keyword">from</span> <span class="string">&#x27;./state/state&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations/mutations&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters/getters&#x27;</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions/actions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">        strict： isDev, <span class="comment">// 开发环境如果在外部修改 state 的值，会报出警告</span></span><br><span class="line">        <span class="attr">state</span>: defaultState,</span><br><span class="line">        mutations,</span><br><span class="line">        getters,</span><br><span class="line">        actions</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>state.js <code>data</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Jobs&#x27;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="string">&#x27;Steve&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mutations.js <code>methods</code>  同步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    updateCount (state, num) &#123;</span><br><span class="line">        state.<span class="property">count</span> = num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>getters.js <code>computed</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    fullName (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.firstName&#125;</span> <span class="subst">$&#123;state.fullName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>actions.js 异步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    updateCountAsync (store, data) &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            store.commit(&#x27;updateCount&#x27;, &#123;</span><br><span class="line">                num: data.num</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, data.time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span><span class="comment">// Vuex辅助方法</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//state</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]) <span class="comment">// 同名</span></span><br><span class="line">    </span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123; <span class="comment">// 不同名</span></span><br><span class="line"><span class="attr">counter</span>: <span class="string">&#x27;count&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123; <span class="comment">// 不同名, 可计算</span></span><br><span class="line">        counter （state）=&gt; state.<span class="property">count</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters 调用方法同上</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// mutations</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;updateCount&#x27;</span>])</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">updateCount</span>(&#123;</span><br><span class="line">        <span class="attr">num1</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">num2</span>: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简写为： </span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;updateCountAsync&#x27;</span>])</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateCountAsync</span>(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">time</span>: <span class="number">2000</span></span><br><span class="line">    &#125;)       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果不支持 <code>...</code> 的语法，则需要安装<code>babel-preset-stage-1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-preset-stage-1 -D</span><br></pre></td></tr></table></figure><p><strong>  <code>babelrc</code> 文件配置 </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;env&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stage-1&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><code>Vue</code> 官方推荐 <code>state</code> 中数据的修改推荐放在 <code>mutations</code> 中</p></li><li><p><code>mutations</code> 和 <code>actions</code>的参数传递只能是两个，第一个是 <code>state</code>，第二个是一个对象，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    updateCount (state, &#123;num1, num2&#125;) &#123;</span><br><span class="line">        state.<span class="property">count</span> = num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>module</code> 模块，可嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vuex 中定义</span></span><br><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">//添加命名空间</span></span><br><span class="line">        <span class="attr">state</span>: &#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">mutations</span>: &#123;</span><br><span class="line">            updateText (state, text) &#123;</span><br><span class="line">                state.<span class="property">text</span> = text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;，</span><br><span class="line">        <span class="attr">getters</span>: &#123;</span><br><span class="line">            textPlus (state, getters, rootState) &#123; <span class="comment">// rootState 为全局的 state</span></span><br><span class="line">                <span class="keyword">return</span> state.<span class="property">text</span> + rootState.<span class="property">b</span>.<span class="property">text</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>: &#123;</span><br><span class="line">            add (&#123;state, commit, rootState &#125;) &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;updateText&#x27;</span>, &#123;<span class="attr">num</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">root</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">state</span>: &#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件中调用</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;a/updateText&#x27;</span>])</span><br><span class="line">   ...<span class="title function_">mapActions</span>([<span class="string">&#x27;a/add&#x27;</span>]) </span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">        <span class="attr">textA</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">a</span>.<span class="property">text</span></span><br><span class="line">    &#125;)   </span><br><span class="line">    </span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;</span><br><span class="line">        <span class="attr">textPlus</span>: <span class="string">&#x27;a/textPlus&#x27;</span></span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="variable language_">this</span>[<span class="string">&#x27;a/updateText&#x27;</span>](<span class="string">&#x27;123&#x27;</span>) <span class="comment">//调用 mutatitns</span></span><br><span class="line">    </span><br><span class="line">  <span class="variable language_">this</span>[<span class="string">&#x27;a/add&#x27;</span>]() <span class="comment">// 调用 actions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>动态注册和解绑模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">store.<span class="title function_">regigterModule</span>(<span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑</span></span><br><span class="line">store.<span class="title function_">unregigterModule</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">        textC：state =&gt; state.<span class="property">c</span>.<span class="property">text</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: defaultState,</span><br><span class="line">        mutations,</span><br><span class="line">        getters,</span><br><span class="line">        actions</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>([</span><br><span class="line">            <span class="string">&#x27;./state/state&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;./mutations/mutations&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;./getters/getters&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;./actions/actions&#x27;</span></span><br><span class="line">    ], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> newState = <span class="built_in">require</span>(<span class="string">&#x27;./state/state&#x27;</span>).<span class="property">default</span></span><br><span class="line">            <span class="keyword">const</span> newMutations = <span class="built_in">require</span>(<span class="string">&#x27;./mutations/mutations&#x27;</span>).<span class="property">default</span></span><br><span class="line">            <span class="keyword">const</span> newGetters = <span class="built_in">require</span>(<span class="string">&#x27;./getters/getters&#x27;</span>).<span class="property">default</span></span><br><span class="line">            <span class="keyword">const</span> newActions = <span class="built_in">require</span>(<span class="string">&#x27;./actions/actions&#x27;</span>).<span class="property">default</span></span><br><span class="line">            </span><br><span class="line">            store.<span class="title function_">hotUpdate</span>(&#123;</span><br><span class="line">                <span class="attr">state</span>: newState,</span><br><span class="line">                <span class="attr">mutations</span>: newMutations,</span><br><span class="line">                <span class="attr">getters</span>: newGetters,</span><br><span class="line">                <span class="attr">actions</span>: newActions</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul><li><p><code>store.watch</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">watch</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">state.<span class="property">count</span> + <span class="number">1</span> <span class="comment">//监听想要得到的返回值</span></span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new count watched&#x27;</span>, newCount) <span class="comment">// 作为第一个方法的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>store.subscribe</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">type</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">payload</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">action, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">type</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">payload</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>定义 <code>Vuex</code> 插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: defaultState,</span><br><span class="line">        mutations,</span><br><span class="line">        getters,</span><br><span class="line">        actions，</span><br><span class="line">        <span class="attr">plugins</span>: [&#123;</span><br><span class="line">        <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my plugin invoked&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h2&gt;&lt;h3 id=&quot;安装、引入、使用&quot;&gt;&lt;a href=&quot;#安装、引入、使用&quot; class=&quot;headerlink&quot; title=&quot;安
      
    
    </summary>
    
      <category term="vue" scheme="http://blog.huangqian.vip/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.huangqian.vip/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue基础</title>
    <link href="http://blog.huangqian.vip/2018/12/17/vue%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.huangqian.vip/2018/12/17/vue基础/</id>
    <published>2018-12-17T14:45:37.000Z</published>
    <updated>2022-07-05T14:36:29.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-基础学习"><a href="#Vue-基础学习" class="headerlink" title="Vue 基础学习"></a>Vue 基础学习</h2><h3 id="实例的属性和方法"><a href="#实例的属性和方法" class="headerlink" title="实例的属性和方法"></a>实例的属性和方法</h3><ul><li><p><code>app.$mount(&#39;#app&#39;) === #el: &#39;#app&#39;</code></p></li><li><p><code>app.text</code>(text为data中变量)直接访问</p></li><li><p><code>app.$data</code>访问 data 属性</p></li><li><p><code>app.$props</code> 访问 props 属性</p></li><li><p><code>app.$el === &#39;#app&#39;</code> 根节点</p></li><li><p><code>app.$options</code> 访问app实例的所有属性</p></li><li><p>app实例中 data 属性在改变的时候 <code>render</code> 方法会执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">$options</span>.<span class="property">render</span> = （h）=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, <span class="string">&#x27;new render function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>app.$root === app</code> </p></li><li><p><code>app,$children</code> 子组件属性</p></li><li><p><code>app.$slots</code> 插槽</p></li><li><p><code>app.$scopedSlots</code> 插槽</p></li><li><p><code>app.$refs</code> 模板的引用，快速定位组件或者元素，如果作用在组件上，返回的是当前组件的实例，如果作用在元素上，返回的就是当前的元素，</p></li><li><p><code>app.$isServer</code> 判断是否为服务端渲染</p></li><li><p><code>app.$watch == watch属性</code></p></li><li><p><code>app.$on(&#39;text&#39;, (a, b) =&gt; &#123;console.log(&#39;test emit&#39; + a + b)&#125;)</code></p></li><li><p><code>app.$emit(&#39;text&#39;, 1, 2)</code> 事件绑定和监听的必须是同一个app，不会冒泡</p></li><li><p><code>app.$forceUpdate()</code> 强制组件更新，如果在 data 中没有直接申明某个属性， 改变这个属性，并不能更新视图，最好的方法不是使用强制刷新，而是在 data 中定义这个属性并设置默认值</p></li><li><p><code>app.$set(app.obj, &#39;a&#39;, 1)</code> 给 data 添加新属性</p></li><li><p><code>app.$delete(app.obj.a)</code> 删除 data 中的 obj 属性</p></li><li><p><code>vm.$nextTick([callback])</code> 组件Dom更新使用</p></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><p>beforeCreate 实例创建</p></li><li><p>Created</p></li><li><p>beforeMount 数据挂载</p></li><li><p>mounted</p></li><li><p>beforeUpdate 数据更新</p></li><li><p>updated</p></li><li><p>activated 动态组件 <code>keep-alive</code></p></li><li><p>deactivated</p></li><li><p>beforeDestroy 实例销毁</p></li><li><p>destroyed</p><ul><li><p>可以只用 <code>app.$ + 生命周期函数名</code> 调用</p></li><li><p>服务端渲染的情况下只有 beforeCreate, created 执行</p></li><li><p><code>render</code> 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render 方法会在 beforeMounte 和 mounted 之间执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>renderError()</code> 收集错误，仅限当前组件， 不会冒泡</p></li><li><p><code>errorCaptured()</code> 收集错误，可冒泡，收集本身和所有子组件的错误，除非子组件停止了事件冒泡 </p></li></ul></li></ul><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ul><li><code>v-html</code> 数据绑定时将<code>html</code>字符串解析成<code>html</code>结构</li><li><code>v-bind</code> 单项数据绑定简写为  <code>:</code></li><li><code>v-on</code>事件绑定，简写为 <code>@</code></li><li><code>v-model</code> 表单元素数据双向绑定</li><li><code>&#123;&#123; data &#125;&#125;</code>非表单元素双向绑定</li><li>动态绑定类名<ul><li><code>:class=&quot;&#123; active: isActive &#125;&quot;</code> 动态绑定类名</li><li><code>:class=&quot;[isActive ? active : &#39;&#39;]&quot;</code> 数组内写表达式</li><li><code>:class=&quot;[&#123; active: isActive &#125;]&quot;</code> 合并上面两种方式，推荐</li><li>计算属性绑定</li></ul></li><li>样式绑定（ vue 绑定样式的时候，会根据浏览器的不同自动添加浏览器前缀）<ul><li><code>:style=&quot;styles&quot;</code> 数据绑定方式,  [styles: Object]</li><li><code>:style=&quot;[style1, style2]&quot;</code> 绑定多个样式</li></ul></li></ul><h3 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h3><ul><li><code>computed</code> 只有当前有依赖的 data 属性值发生改变时，才会重新计算执行</li><li><code>computed</code> 拥有 get 和 set 方法，但是不到万不得已不要使用 set 方法</li><li><code>watch</code> 所监听的 对象必须是 data 中的某个属性</li><li><code>watch</code> 中包含 <code>handler</code>  <code>immediate: true</code>  <code>deep: false</code>三个属性<ul><li><code>handler</code>  是当所监听的对象发生改变的时候执行的回调方法</li><li><code>immediate: true</code> watch 监听对象的方法是不会马上执行的，只有有改变的时候才会执行 handler， 当immediate 配置项为 true 的时候，watch的 handler 方法才会立即执行一次</li><li><code>deep: false</code>默认为 false ，表示 watch 只会监听被监听对象的引用，不会监听内部的属性，只有当该对象被重新赋值的时候才会被监听到，当 <code>deep: true</code> 的时候才能监听到内部的属性值的改变</li><li>可以将内部属性以 <code>&#39;obj.a&#39;</code> 的方式去监听，就可以监听到内部属性的改变，推荐</li></ul></li><li>不要试图在 <code>computed</code> 和 <code>watch</code> 中试图修改被监听的对象，不然可能会出现死循环的情况，尤其在 <code>computed</code>中</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><p><code>v-bind</code> 属性的绑定</p></li><li><p><code>v-text</code> 标签内显示的内容 当出现<code>&lt;div v-text=&quot;text&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/div&gt;</code>不会显示双花括号中的内容</p></li><li><p><code>v-html</code> 将数据当做 html 字符串的方式进行解析</p></li><li><p><code>v-show</code> 是否显示当前节点，原理：<code>display: none</code></p></li><li><p><code>v-if</code> 是否存在当前节点，(动态增删节点，引起 dom 重绘) </p></li><li><p><code>v-else</code> <code>v-else-if</code> 配合 <code>v-if</code> 进行条件渲染</p></li><li><p><code>v-for</code> 遍历数组或者对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(item, index) in arr&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div v-for=&quot;(value, key, index) in obj&quot; :key=&quot;key&quot;&gt;&#123;&#123; value &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>指定 key 就会缓存 dom 节点，在数据重新渲染的时候提高性能，一般在遍历数组的时候使用 item 作为key，如果使用 index 作为 key 的话，没有任何意义</li></ul></li><li><p><code>v-on</code> 事件绑定</p></li><li><p><code>v-model</code> 一般作用于表单元素实现双向绑定</p><ul><li>修饰符<ul><li><code>v-model.number</code> 转数字格式</li><li><code>v-model.trim</code> 去掉首位空格</li><li><code>v-model.lazy</code> 默认文本框绑定的是 input 事件, 当时该修饰符的时候绑定的事件就是 change 事件</li></ul></li></ul></li><li><p><code>v-pre</code> 不解析 data 数据，直接输出</p></li><li><p><code>v-cloak</code> 在vue代码还没有加载完成之前，可以给元素加上这个指令不显示组件，使用 <code>webpack</code> 打包之后这个指令一般用不到</p></li><li><p><code>v-once</code> 数据绑定到节点中不会被修改，节省性能开销，<code>vue</code> 不再根据虚拟 <code>Dom</code> 检查该节点</p></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li><p>定义组件名最好用大写的方式，大驼峰方式，使用组件的时候使用短横线的形式</p></li><li><p><code>`</code>javascript<br>const component = {</p><pre><code>template: &apos;&lt;div&gt;&lt;/div&gt;&apos;,data () &#123;    return &#123;        text: 123    &#125;&#125;</code></pre><p>}</p><p>new Vue({</p><pre><code>el: &apos;#app&apos;components: &#123;    comp: component&#125;,template: `    &lt;comp&gt;&lt;/comp&gt;`</code></pre><p>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 定义组件的时候 ` data` 必须是一个方法， 且 `return` 的必须是一个新建的对象，不能是已有的全局对象</span><br><span class="line"></span><br><span class="line">- `props` 作用</span><br><span class="line"></span><br><span class="line">  - 定义组件被外部使用的时候所需要的配置参数</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    //类型检查</span><br><span class="line">    props: &#123;</span><br><span class="line">        active: Boolean，</span><br><span class="line">        onChange: Function</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //直接传值,不够严谨</span><br><span class="line">    props: [&#x27;active&#x27;, &#x27;onChange&#x27;]</span><br><span class="line">    </span><br><span class="line">    //严谨方式</span><br><span class="line">    props: &#123;</span><br><span class="line">        active： &#123;</span><br><span class="line">            type：Boolean,</span><br><span class="line">            required: true,</span><br><span class="line">            default: true,</span><br><span class="line">            validator (value) &#123;</span><br><span class="line">             return typeof value === Boolean   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        obj: &#123;</span><br><span class="line">            type：Object,</span><br><span class="line">            //required: true,</span><br><span class="line">            default () &#123;</span><br><span class="line">                return newObj</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        onChange: Function</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果所传的值是一个对象，default 需要是一个方法返回一个默认对象</span><br><span class="line">    // 如果有了 default ，required 则不会生效</span><br><span class="line">    // validator可以自定义校验规则</span><br></pre></td></tr></table></figure><ul><li><p>命名和使用规范： 定义小驼峰命名方式，使用短横杠的方式</p></li><li><p><code>props</code> 中的参数变量最好不要做主动修改，<code>props</code> 是单项数据流</p></li></ul></li><li><p><code>extend</code> 生成 <code>Vue</code> 的一个子类</p><ul><li><code>`</code>javascript<br>const CompVue = Vue.extend(comp)<br>new CompVue({<pre><code>el: &apos;#app&apos;</code></pre>})<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 生成的子类，`data` 属性和生命周期等都会进行合并，父类先执行，子类后执行</span><br><span class="line"></span><br><span class="line">  - 作用：组件的扩展和重构</span><br><span class="line"></span><br><span class="line">  - 子类通过 `this.$parent` 访问父类， 最好不要进行修改</span><br><span class="line"></span><br><span class="line">- `model` 属性，避免变量冲突，自定义 `props` 中的变量名</span><br><span class="line"></span><br><span class="line">  - 实现 `v-model` 的双向绑定</span><br><span class="line"></span><br><span class="line">    ```JavaScript</span><br><span class="line">    const component = &#123;</span><br><span class="line">        model: &#123;</span><br><span class="line">            prop: &#x27;myValue&#x27;,</span><br><span class="line">        event: &#x27;change&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        props: [&#x27;myValue&#x27;],</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; @input=&quot;handleInput&quot; :value=&quot;myValue&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleInput (e) &#123;</span><br><span class="line">                this.$emit(&#x27;change&#x27;, e.target.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            comp: component</span><br><span class="line">        &#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                value: &#x27;123&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;comp-one v-model=&quot;value&quot;&gt;&lt;/comp-one&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>provide</code> 和 <code>inject</code> 属性：组件内使用越级的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">    inject：[<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;data&#x27;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;child component: &#123;&#123; data.value &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">comp</span>: component</span><br><span class="line">    &#125;,</span><br><span class="line">    provide () &#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;value&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 可被读取</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">value</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>render</code> 方法</p><ul><li><p>组件的 <code>template</code> 属性是通过 <code>render</code> 方法编译成为虚拟 Dom</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 createElement 就是 Vue 虚拟 dom 的概念 即 VNode 类</span></span><br><span class="line">render (createElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;comp1&#x27;</span>, &#123; <span class="comment">// 根节点</span></span><br><span class="line">        <span class="attr">ref</span>: <span class="string">&#x27;comp1&#x27;</span>，</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">props1</span>: <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">on</span>: &#123;</span><br><span class="line">          <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">handleClick</span>               </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">nativeOn</span>: &#123; <span class="comment">// 直接创建在根节点上</span></span><br><span class="line">          <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">handleClick</span>               </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">domProps</span>: &#123; <span class="comment">//原生 dom 操作</span></span><br><span class="line">            <span class="attr">innerHtml</span>: <span class="string">&#x27;&lt;span&gt;123123&lt;/span&gt;&#x27;</span>             </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">slots</span>: &#123;</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="string">&#x27;test-id&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="comment">//子节点</span></span><br><span class="line">[</span><br><span class="line">     <span class="title function_">createElement</span>(<span class="string">&#x27;comp2&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">ref</span>: <span class="string">&#x27;comp2&#x27;</span></span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ul><li>在使用组件的中间添加内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">&lt;slot my-value=&quot;123&quot;&gt;&lt;/slot&gt; // 具名插槽</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">comp</span>: component</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;comp-one&gt;</span></span><br><span class="line"><span class="string">                // 使用引用该组件的属性</span></span><br><span class="line"><span class="string">                &lt;span slot=&quot;header&quot;&gt;&#123;&#123; value &#125;&#125;&lt;/span&gt; </span></span><br><span class="line"><span class="string">                // 作用域插槽，使用组件内部定义的属性</span></span><br><span class="line"><span class="string">                &lt;span slot-scope=&quot;props&quot;&gt;&#123;&#123; props.myValue &#125;&#125;&lt;/span&gt; </span></span><br><span class="line"><span class="string">&lt;/comp-one&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-基础学习&quot;&gt;&lt;a href=&quot;#Vue-基础学习&quot; class=&quot;headerlink&quot; title=&quot;Vue 基础学习&quot;&gt;&lt;/a&gt;Vue 基础学习&lt;/h2&gt;&lt;h3 id=&quot;实例的属性和方法&quot;&gt;&lt;a href=&quot;#实例的属性和方法&quot; class=&quot;head
      
    
    </summary>
    
      <category term="vue" scheme="http://blog.huangqian.vip/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.huangqian.vip/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Using</title>
    <link href="http://blog.huangqian.vip/2018/12/17/hexo-using/"/>
    <id>http://blog.huangqian.vip/2018/12/17/hexo-using/</id>
    <published>2018-12-17T12:20:12.000Z</published>
    <updated>2022-07-06T18:58:38.336Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><code>test</code></p><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
      <category term="hexo" scheme="http://blog.huangqian.vip/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.huangqian.vip/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法总结</title>
    <link href="http://blog.huangqian.vip/2018/12/16/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.huangqian.vip/2018/12/16/MarkDown语法总结/</id>
    <published>2018-12-16T12:20:12.000Z</published>
    <updated>2022-07-05T14:36:29.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><h2 id="文章信息"><a href="#文章信息" class="headerlink" title="文章信息"></a>文章信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2018-01-01 00:00:00 文章生成时间</span><br><span class="line">categories: 文章分类目录</span><br><span class="line">tags: 文章标签</span><br><span class="line">description: 页面描述</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.*斜体*   _斜体_</span><br><span class="line">2.**粗体**</span><br><span class="line">3.***加粗斜体***</span><br><span class="line">4.~~删除线~~</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li><em>我是斜体</em> <em>我也是斜体</em></li><li><strong>我是粗体</strong></li><li><strong>我是加粗斜体</strong></li><li><del>我是删除线</del></li></ul><span id="more"></span><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.#h1#</span><br><span class="line">2.##h2##</span><br><span class="line">3.###h3###</span><br><span class="line">4.####h4####</span><br><span class="line">5.#####h5#####</span><br><span class="line">6.######h6######</span><br></pre></td></tr></table></figure><p><strong>示例：为了文档完整这里不做示例测试</strong></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p><strong>语法说明</strong></p><p>[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。<a href="https://jobs0327.github.io/2018/02/27/MarkDown/%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80%20%E2%80%9C%E9%93%BE%E6%8E%A5%E6%A0%87%E9%A2%98%E2%80%9D">链接文字</a>’这样的形式。<strong>链接地址与链接标题前有一个空格。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](链接地址)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p><a href="http://www.baidu.com/">百度一下</a></p><h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><p><strong>语法说明</strong></p><p>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，<strong>链接地址与链接标题前有一个空格。</strong></p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字][链接标记]</span><br><span class="line"></span><br><span class="line">[]: 链接地址</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p><a href="https://jobs0327.github.io/2018/02/27/MarkDown/:http://www.baidu.com">Jobs</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p><strong>语法说明</strong></p><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p><a href="http://www.baidu.com/">http://www.baidu.com</a></p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p><strong>语法说明</strong></p><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目录&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">[目录](#index)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例会产生文档报错，这里不错演示</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 *，+，- 表示无序列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. - 无序列表</span><br><span class="line">2. + 无序列表</span><br><span class="line">3. * 无序列表</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li>我是无序列表</li><li>我是无序列表</li><li>我是无序列表</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字接着一个英文句点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ol><li>我是有序列表</li></ol><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p><strong>语法说明</strong></p><p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jobs</span><br><span class="line">这是对jobs的解释</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>Jobs</p><p>: 这是对Jobs 的解释</p><h3 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h3><p><strong>语法说明</strong></p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*   这是一个进行缩进的列表项</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li>这是一个进行缩进的列表项</li></ul><h3 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h3><p><strong>语法说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*这是一个引用列表</span><br><span class="line"></span><br><span class="line">&gt; 第一项</span><br><span class="line">&gt; 第二项</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li><p>这是一个引用列表</p><blockquote><p>第一项</p><p>第二项</p></blockquote></li></ul><h3 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h3><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&lt;这里是代码块&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li><p><strong>特殊情况</strong></p></li></ul><p>在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>语法说明</strong></p><p>引用需要在被引用的文本前加上&gt;符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br></pre></td></tr></table></figure><p>示例</p><blockquote><p>这是一个引用</p></blockquote><h3 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h3><p><strong>语法说明</strong></p><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt;</p><p><strong>示例</strong></p><blockquote><blockquote><blockquote><p>这是第三层引用嵌套</p></blockquote><p>这是第二层引用嵌套</p></blockquote><p>这是第一层引用嵌套</p></blockquote><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。</p><p>图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片Alt](图片地址 &quot;图片Title&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg"><img src="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg" alt="不忘初心，方得始终"></a></p><p><a href="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg">不忘初心，方得始终</a></p><h3 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h3><p>在文档要插入图片的地方写![图片Alt][标记]</p><p>在文档的最后写上[标记]:图片地址 “Title”</p><p><a href="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg"><img src="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg" alt="不忘初心，方得始终"></a></p><p><a href="https://jobs0327.github.io/2018/02/27/MarkDown/media/1.jpg">不忘初心，方得始终</a></p><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字[^1]</span><br><span class="line"></span><br><span class="line">[^1]: 这是一个注脚</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>这是一段文字<a href="https://jobs0327.github.io/2018/02/27/MarkDown/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B3%A8%E8%84%9A">^1</a></p><h2 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h2><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$E=mc^2$</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>$E=mc^2$</p><h3 id="整行公式"><a href="#整行公式" class="headerlink" title="整行公式"></a>整行公式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\sum_&#123;i=1&#125;^n a_i=0$$</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>$$\sum_{i=1}^n a_i=0$$</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ol><li>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</li><li>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。</li><li>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 学号 | 姓名 | 性别 |</span><br><span class="line">| - | - |</span><br><span class="line">| 201458503204 | Jobs | 男 |</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><table><thead><tr><th>学号</th><th>姓名</th><th>性别</th></tr></thead><tbody><tr><td>201458503204</td><td>Jobs</td><td>男</td></tr></tbody></table><p><strong>添加一行</strong>：<code>shift + Enter</code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。可以在星号或是减号中间插入空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">-----</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><hr><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。</p><p>语法说明：</p><ol><li>插入行内代码，即插入一个单词或者一句代码的情况，使用<code>code</code>这样的形式插入。</li><li>插入多行代码，可以使用缩进或者“<code>code “</code>,具体看示例。</li></ol><p>注意： 缩进式插入前方必须有空行</p><h3 id="行内式-2"><a href="#行内式-2" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`console.log()`</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log()</span><br></pre></td></tr></table></figure><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><p><strong>用六个`包裹多行代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function foo () &#123;</span><br><span class="line">conslole.log(&#x27;hello markdown&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML原始代码"><a href="#HTML原始代码" class="headerlink" title="HTML原始代码"></a>HTML原始代码</h3><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">   © 2004 Foo Corporation</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MarkDown&quot;&gt;&lt;a href=&quot;#MarkDown&quot; class=&quot;headerlink&quot; title=&quot;MarkDown&quot;&gt;&lt;/a&gt;MarkDown&lt;/h1&gt;&lt;h2 id=&quot;文章信息&quot;&gt;&lt;a href=&quot;#文章信息&quot; class=&quot;headerlink&quot; title=&quot;文章信息&quot;&gt;&lt;/a&gt;文章信息&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	title: 文章标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	date: 2018-01-01 00:00:00 文章生成时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	categories: 文章分类目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tags: 文章标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	description: 页面描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;斜体、粗体、删除线&quot;&gt;&lt;a href=&quot;#斜体、粗体、删除线&quot; class=&quot;headerlink&quot; title=&quot;斜体、粗体、删除线&quot;&gt;&lt;/a&gt;斜体、粗体、删除线&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.*斜体*   _斜体_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.**粗体**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.***加粗斜体***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.~~删除线~~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;我是斜体&lt;/em&gt; &lt;em&gt;我也是斜体&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我是粗体&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我是加粗斜体&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;我是删除线&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MarkDown" scheme="http://blog.huangqian.vip/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://blog.huangqian.vip/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>css清除浮动常用方法</title>
    <link href="http://blog.huangqian.vip/2018/12/12/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.huangqian.vip/2018/12/12/css清除浮动常用方法/</id>
    <published>2018-12-12T13:06:41.000Z</published>
    <updated>2022-07-05T14:36:29.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css清除浮动常用方法总结"><a href="#css清除浮动常用方法总结" class="headerlink" title="css清除浮动常用方法总结"></a>css清除浮动常用方法总结</h1><h2 id="浮动对布局带来的影响"><a href="#浮动对布局带来的影响" class="headerlink" title="浮动对布局带来的影响"></a>浮动对布局带来的影响</h2><ul><li>css块级元素在页面中默认是独占一行且自上而下排列的，也就是所谓的文档标准流，但当我们遇到将块级元素水平排列的情况时，标准流已经不能满足我们的需求，使用浮动布局可能会是最简单快捷的方式</li><li>浮动会将行内元素转化成为块级元素，当然这也是脱离文档流的表现</li><li>如果要实现左右浮动之后,父容器没有设置高度，子容器全部浮动，下面还有内容跟在后面，这样就会出现后面的内容跑到浮动元素的下面去，显然这不是我们想要的结果，这时我们就需要考虑怎么清除浮动对后面元素产生的影响</li></ul><h2 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动"></a>如何清除浮动</h2><ul><li><p>使用clear属性清理浮动</p><p>代码示例：</p><p> <code>clear: both | left | right</code></p></li><li><p>给父元素设置 <code>overflow: hidden</code></p></li><li><p><strong>推荐</strong>： 使用伪元素清除浮动</p><span id="more"></span><p>代码示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;//隐藏</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">zoom:<span class="number">1</span>;//兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时将 <code>clerafix</code> 这个类作用在浮动元素的父元素上即可</p></li><li><p>如果使用<code>less</code>或者<code>sass</code>，可以使用混入的方式，这样<code>css</code>样式就会和<code>html</code>代码完全分开，不需要再在<code>html</code>中加上额外的类名，当然实现代码还是上面的效果</p><ul><li><p><code>less</code>实现混入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.a &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">.mixin-class &#123;</span><br><span class="line">  .a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result=&gt;</span><br><span class="line">.a &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">.mixin-class &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体参见：</strong> <a href="http://lesscss.cn/features/#mixins-feature">less混入</a></p></li><li><p><code>sass</code>实现混入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">定义：（@mixin）</span><br><span class="line">@mixin large-text &#123;</span><br><span class="line">  font: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: 20px;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  color: #ff0000;</span><br><span class="line">&#125;</span><br><span class="line">引用：(@include)</span><br><span class="line">.page-title &#123;</span><br><span class="line">  @include large-text;</span><br><span class="line">  padding: 4px;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体参见：</strong> <a href="https://www.sass.hk/docs/">sass混入</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;css清除浮动常用方法总结&quot;&gt;&lt;a href=&quot;#css清除浮动常用方法总结&quot; class=&quot;headerlink&quot; title=&quot;css清除浮动常用方法总结&quot;&gt;&lt;/a&gt;css清除浮动常用方法总结&lt;/h1&gt;&lt;h2 id=&quot;浮动对布局带来的影响&quot;&gt;&lt;a href=&quot;#浮动对布局带来的影响&quot; class=&quot;headerlink&quot; title=&quot;浮动对布局带来的影响&quot;&gt;&lt;/a&gt;浮动对布局带来的影响&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;css块级元素在页面中默认是独占一行且自上而下排列的，也就是所谓的文档标准流，但当我们遇到将块级元素水平排列的情况时，标准流已经不能满足我们的需求，使用浮动布局可能会是最简单快捷的方式&lt;/li&gt;
&lt;li&gt;浮动会将行内元素转化成为块级元素，当然这也是脱离文档流的表现&lt;/li&gt;
&lt;li&gt;如果要实现左右浮动之后,父容器没有设置高度，子容器全部浮动，下面还有内容跟在后面，这样就会出现后面的内容跑到浮动元素的下面去，显然这不是我们想要的结果，这时我们就需要考虑怎么清除浮动对后面元素产生的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何清除浮动&quot;&gt;&lt;a href=&quot;#如何清除浮动&quot; class=&quot;headerlink&quot; title=&quot;如何清除浮动&quot;&gt;&lt;/a&gt;如何清除浮动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用clear属性清理浮动&lt;/p&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;clear: both | left | right&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给父元素设置 &lt;code&gt;overflow: hidden&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;： 使用伪元素清除浮动&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://blog.huangqian.vip/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://blog.huangqian.vip/tags/CSS/"/>
    
  </entry>
  
</feed>
